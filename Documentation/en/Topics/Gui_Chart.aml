<?xml version="1.0" encoding="utf-8"?>
<topic id="a76a0a9c-bb95-4596-9464-9903379b3096" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
      <codeEntityReference>T:StockSharp.Xaml.Charting.Chart</codeEntityReference> - the graphical component that allows to plot the stock charts: candles, indicators,
      and to display on the charts the markers of orders and trades.
      </para>
      <para>
      	Below is an example of the chart plotting using the <codeEntityReference>T:StockSharp.Xaml.Charting.Chart</codeEntityReference>.
      	The example from Samples/Chart/SampleChart is taken as a basis, in which some changes were made.
      </para>
    </introduction>
    
     <mediaLink><image placement="left" xlink:href="Gui_ChartSample" /></mediaLink>
    
      <procedure>
      <title>Example of chart plotting using Chart</title>

      <steps class="ordered">
		  <step>
			  <content>
				  <para>
					  In XAML creating window and adding to it the graphical component <codeEntityReference qualifyHint="true">T:StockSharp.Xaml.Charting.Chart</codeEntityReference>.
					  Assigning the <legacyBold>Chart</legacyBold> name to the component. Note that when the window is being created it is necessary to add the
					  <legacyItalic>http://schemas.stocksharp.com/xaml</legacyItalic> namespace.
				  </para>
				   <code title="XAML" language="XAML">
	  				<![CDATA[
<Window x:Class="SampleChart.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:charting="http://schemas.stocksharp.com/xaml"
        Title="ChartWindow" Height="300" Width="300">
   <charting:ChartPanel x:Name="Chart" IsInteracted="True" Grid.Row="1"/>
</Window>

	  				]]>
              </code>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  В коде главного окна декларируем переменные для <codeEntityReference>T:StockSharp.Algo.Candles.CandleManager</codeEntityReference>, областей графика, элементов графика и индикаторов.					  
				  </para>
				    <code title="C#" language="C#">
              		<![CDATA[
              		
private readonly Dictionary<CandleSeries, ChartWindow> _chartWindows = new Dictionary<CandleSeries, ChartWindow>();

private CandleManager _candleManager;
private readonly LogManager _logManager;

private ChartArea _candlesArea;
private ChartArea _indicatorsArea;

private ChartIndicatorElement _smaChartElement;
private ChartIndicatorElement _macdChartElement;
private ChartCandleElement _candlesElem;

private SimpleMovingAverage _sma;
private MovingAverageConvergenceDivergence _macd;
              		
	  				]]>

				   
				   </code>
			  </content>
		  </step>
		    <step>
			  <content>
				  <para>
					  В обработчике события <legacyBold>Click</legacyBold> кнопки <legacyBold>Connect</legacyBold>, наряду с подпиской на события коннектора и вызовом метода
					   <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.Connect</codeEntityReference>, инициализируем кандлменеджер и подписываемся на событие
					   <codeEntityReference qualifyHint="true">E:StockSharp.Algo.Candles.CandleManager.Processing</codeEntityReference>. 
					   В обработчике этого события при получении новой свечи будет выполнятся отрисовка графика.
				  </para>
				    <code title="C#" language="C#">
              		<![CDATA[
private void ConnectClick(object sender, RoutedEventArgs e)
{
        ..........................................         
        _logManager.Sources.Add(_trader);
        _trader.Restored += () => this.GuiAsync(() => MessageBox.Show(this, LocalizedStrings.Str2958));

        _trader.ConnectionError += error => this.GuiAsync(() => MessageBox.Show(this, error.ToString()));

        _trader.MarketDataSubscriptionFailed += (security, type, error) =>
            this.GuiAsync(() => MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2956Params.Put(type, security)));

        Security.SecurityProvider = new FilterableSecurityProvider(_trader);

        _trader.Connect();

        _candleManager = new CandleManager(_trader);
        _candleManager.Processing += DrawCandle;

        ConnectBtn.IsEnabled = false;
    }
}
	  				]]>
				   </code>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  В обработчике кнопки <legacyBold>ShowChart</legacyBold> создаем объекты индикаторов, областей и элементов графика. Добавляем элементы к областям, а области к чарту. Открываем окно графика
					  и запускаем работу кандлменеджера.
				  </para>
				    <code title="C#" language="C#">
              		<![CDATA[
private void ShowChartClick(object sender, RoutedEventArgs e)
{
    var security = SelectedSecurity;

    var series = new CandleSeries(CandlesSettings.Settings.CandleType, security, CandlesSettings.Settings.Arg);

    _chartWindows.SafeAdd(series, key =>
    {
        var wnd = new ChartWindow
        {
            Title = "{0} {1} {2}".Put(security.Code, series.CandleType.Name, series.Arg)
        };

        wnd.MakeHideable();

        _sma = new SimpleMovingAverage() { Length = 11 };
        _macd = new MovingAverageConvergenceDivergence();

        _smaChartElement = new ChartIndicatorElement();
        _macdChartElement = new ChartIndicatorElement();
        _candlesElem = new ChartCandleElement();

        _macdChartElement.DrawStyle = ChartIndicatorDrawStyles.Histogram;

        _candlesArea = new ChartArea();
        _indicatorsArea = new ChartArea();

        wnd.Chart.Areas.Add(_candlesArea);
        wnd.Chart.Areas.Add(_indicatorsArea);

        _candlesArea.Elements.Add(_candlesElem);
        _candlesArea.Elements.Add(_smaChartElement);
        _indicatorsArea.Elements.Add(_macdChartElement);

        return wnd;
    }).Show();

    _candleManager.Start(series);
}
	  				]]>
				   </code>
			  </content>
		  </step>
		  		  <step>
			  <content>
				<para>
					  В обработчике события <codeEntityReference qualifyHint="true">E:StockSharp.Algo.Candles.CandleManager.Processing</codeEntityReference> производим отрисовку
					  свечи и значений индикаторов для каждой завершенной свечи. Для этого:
				</para>
				<list class="ordered">
  					<listItem>
  						<para>Вычисляем значения индикаторов.</para>
  					</listItem>
  					<listItem>
  						<para>Заполняем словарь <legacyBold>elements</legacyBold> парами "объект элемента - значение элемента"</para>
  					</listItem>
  					<listItem>
  						<para>Для отрисовки графика вызываем метод 
  						<codeEntityReference qualifyHint="true">M:StockSharp.Xaml.Charting.Chart.Draw(StockSharp.Xaml.Charting.ChartDrawData)</codeEntityReference>,
  						в который передаем время и словарь элементов.</para>
  					</listItem>
				</list>
				  
				 <para>
					  Результат работы программы представлен на рисунке выше.
				</para>
				  
				    <code title="C#" language="C#">
              		<![CDATA[
private void DrawCandle(CandleSeries series, Candle candle)
{
    var wnd = _chartWindows.TryGetValue(series);

    if (wnd != null)
    {
        if (candle.State != CandleStates.Finished)
            return;

        var smaValue = _sma.Process(candle);
        var macdValue = _macd.Process(candle);

        var data = new ChartDrawData();
        data
          .Group(candle.OpenTime)
            .Add(_candlesElem, candle)
            .Add(_smaChartElement, smaValue)
            .Add(_macdChartElement, macdValue);

            wnd.Chart.Draw(data);

    }
}
]]>
				   </code>
			  </content>
		  </step>
		  
		  </steps>
    </procedure>
    
  </developerConceptualDocument>
</topic>


