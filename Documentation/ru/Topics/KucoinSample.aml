<?xml version="1.0" encoding="utf-8"?>
<topic id="e237cc0e-6470-4cf0-81cf-5fd8594a567a" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>Пример работы с <codeEntityReference qualifyHint="false">T:StockSharp.Kucoin.KucoinMessageAdapter</codeEntityReference> демонстрирует приложение SampleKucoin,
        показанное на рисунке ниже. Исходные коды примера лежат в дистрибутиве в папке <legacyItalic>Samples/Kucoin</legacyItalic>.</para>
		<mediaLink><image placement="center" xlink:href="KucoinSample"/></mediaLink>
    </introduction>
    
    <procedure>
		<steps class="ordered">
			<step>
				<content>
					<para>В самом начале необходимо создать экземпляр класса <codeEntityReference>T:StockSharp.Algo.Connector</codeEntityReference>:</para>
            		<code language="C#">
            				<![CDATA[
Connector Connector = new Connector();
							]]>
					</code>
				</content>
			</step>
			<step>
				<content>
					<para>Далее необходимо создать экземпляр класса адаптера 
					<codeEntityReference qualifyHint="false">T:StockSharp.Kucoin.KucoinMessageAdapter</codeEntityReference> 
					и передать его в <codeEntityReference>T:StockSharp.Algo.Connector</codeEntityReference>:</para>
            		<code language="C#">
            				<![CDATA[
            var messageAdapter = new KucoinMessageAdapter(_connector.TransactionIdGenerator)
            {
                Key = "qwerapeiruWEXBQFWMPWRLTNty".To<SecureString>(),
                Secret = "qwPOEIUXNQVEIRYERNVBWRIVIWBVMPQWM".To<SecureString>(),
            };
            Connector.Adapter.InnerAdapters.Add(messageAdapter);
							]]>
					</code>
	<para>Также <codeEntityReference>T:StockSharp.Algo.Connector</codeEntityReference> можно настроить с помощью <link xlink:href="0e99f0d7-9d8a-4bb5-a914-6461677b267b" /></para>
				</content>
			</step>
			<step>
				<content>
					<para>Далее следует установить требуемые обработчики событий <codeEntityReference qualifyHint="false">T:StockSharp.BusinessEntities.IConnector</codeEntityReference>:</para>
            		<code language="C#">
            				<![CDATA[
Connector.Restored += () => this.GuiAsync(() =>
{
	// разблокируем кнопку Экспорт (соединение было восстановлено)
	ChangeConnectStatus(true);
	MessageBox.Show(this, LocalizedStrings.Str2958);
});

// подписываемся на событие успешного соединения
Connector.Connected += () =>
{
	// возводим флаг, что соединение установлено
	_isConnected = true;

	// разблокируем кнопку Экспорт
	this.GuiAsync(() => ChangeConnectStatus(true));
};
Connector.Disconnected += () => this.GuiAsync(() => ChangeConnectStatus(false));

// подписываемся на событие разрыва соединения
Connector.ConnectionError += error => this.GuiAsync(() =>
{
	// заблокируем кнопку Экспорт (так как соединение было потеряно)
	ChangeConnectStatus(false);

	MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2959);
});

// подписываемся на ошибку обработки данных (транзакций и маркет)
Connector.Error += error =>
	this.GuiAsync(() => MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2955));

// подписываемся на ошибку подписки маркет-данных
Connector.MarketDataSubscriptionFailed += (security, msg, error) =>
	this.GuiAsync(() => MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2956Params.Put(msg.DataType, security)));

Connector.NewSecurity += security => _securitiesWindow.SecurityPicker.Securities.Add(security);
Connector.NewMyTrade += trade => _myTradesWindow.TradeGrid.Trades.Add(trade);
Connector.NewTrade += trade => _tradesWindow.TradeGrid.Trades.Add(trade);
Connector.NewOrder += order => _ordersWindow.OrderGrid.Orders.Add(order);

Connector.NewPortfolio += portfolio =>
{
	// регистрирует портфели на обновление данных
	Connector.RegisterPortfolio(portfolio);

	_portfoliosWindow.PortfolioGrid.Portfolios.Add(portfolio);
};
Connector.NewPosition += position => _portfoliosWindow.PortfolioGrid.Positions.Add(position);

// subscribe on error of order registration event
Connector.OrderRegisterFailed += _ordersWindow.OrderGrid.AddRegistrationFail;
// subscribe on error of order cancelling event
Connector.OrderCancelFailed += OrderFailed;          
							]]>
					</code>						
				</content>
			</step>
			<step>
				<content>
					<para>Далее необходимо выполнить подключение к серверу <token>Kucoin</token>:</para>
            		<code language="C#">
            				<![CDATA[
Connector.Connect();
							]]>
					</code>						
				</content>
			</step>
					
			<step>
				<content>
					<para>После подключения можно ожидать срабатывания событий:</para>
						<list class="bullet">
							<listItem>
								<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.SecurityChanged</codeEntityReference> – 
								изменение инструмента (последней цены, цены спроса/предложения и т.д.) запрошенного через 
								<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterSecurity(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes})</codeEntityReference>.</para>
							</listItem>
							<listItem>
								<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.MarketDepthChanged</codeEntityReference> – 
									изменение стакана, запрошенного с помощью <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterMarketDepth(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes},System.Nullable{System.Int32})</codeEntityReference>.</para>
							</listItem>
							<listItem>
								<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.NewTrade</codeEntityReference> – 
									новые тики по подписанным с помощью <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterTrades(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes})</codeEntityReference> инструментам.</para>
							</listItem>
							<listItem>
								<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IPortfolioProvider.PortfolioChanged</codeEntityReference> – 
									изменение портфелей, запрошенное с помощью <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterPortfolio(StockSharp.BusinessEntities.Portfolio)</codeEntityReference>.</para>
							</listItem>
						</list>
				</content>
			</step>

			<step>
				<content>
					<para>Поиск инструментов (<link xlink:href="39e0b7aa-0303-438c-b347-fea21540c9f3">подробнее</link>):</para>
				</content>
				<mediaLink><image placement="center" xlink:href="SecuritiesLookupWindow"/></mediaLink>
			</step>
			<step>
				<content>
					<para>Для получения обновлений и сделок по выбранному инструменту необходимо использовать методы
					<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterSecurity(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes})</codeEntityReference> и
					<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterTrades(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes})</codeEntityReference> соответственно:</para>
            		<code language="C#">
            				<![CDATA[
private void QuotesClick(object sender, RoutedEventArgs e)
{
	var security = SecurityPicker.SelectedSecurity;
	var trader = MainWindow.Instance.Connector;

	if (trader.RegisteredSecurities.Contains(security))
	{
		trader.UnRegisterSecurity(security);
		trader.UnRegisterTrades(security);
	}
	else
	{
		trader.RegisterSecurity(security);
		trader.RegisterTrades(security);
	}
}
							]]>
							</code>						
						</content>
					</step>
					<step>
						<content>
							<para>Для запроса обновлений по стаканам необходимо воспользоваться методом 
							<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterMarketDepth(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes},System.Nullable{System.Int32})</codeEntityReference>:</para>
            				<code language="C#">
            				<![CDATA[
private void DepthClick(object sender, RoutedEventArgs e)
{
	var trader = MainWindow.Instance.Connector;

	var window = _quotesWindows.SafeAdd(SecurityPicker.SelectedSecurity, security =>
	{
		// начинаем получать котировки стакана
		trader.RegisterMarketDepth(security);

		// создаем окно со стаканом
		var wnd = new QuotesWindow { Title = security.Id + " " + LocalizedStrings.MarketDepth };
		wnd.MakeHideable();
		return wnd;
	});

	if (window.Visibility == Visibility.Visible)
		window.Hide();
	else
		window.Show();

	if (!_initialized)
	{
		TraderOnMarketDepthChanged(trader.GetMarketDepth(SecurityPicker.SelectedSecurity));
		trader.MarketDepthChanged += TraderOnMarketDepthChanged;
		_initialized = true;
	}
}
							]]>
							</code>
						</content>
					</step>
					
					
					<step>
						<content>
							<para>Для регистрации заявок предусмотрена кнопка <legacyBold>Новая заявка</legacyBold>. 
							Метод <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterOrder(StockSharp.BusinessEntities.Order)</codeEntityReference> отправляет заявку на сервер:</para>
            				<code language="C#">
            				<![CDATA[
private void NewOrderClick(object sender, RoutedEventArgs e)
{
	var newOrder = new OrderWindow
	{
		Order = new Order { Security = SecurityPicker.SelectedSecurity },
		SecurityProvider = MainWindow.Instance.Connector,
		MarketDataProvider = MainWindow.Instance.Connector,
		Portfolios = new PortfolioDataSource(MainWindow.Instance.Connector),
	};

	if (newOrder.ShowModal(this))
		MainWindow.Instance.Connector.RegisterOrder(newOrder.Order);
}
							]]>
							</code>						
						</content>
					</step>
					<step>
						<content>
							<para>Для вывода средств необходимо сформировать заявку на вывод, для этого в коде следует написать:</para>
            				<code language="C#">
            				<![CDATA[
var order = new Order
{
	Type = OrderTypes.Conditional,
	Condition = new KucoinOrderCondition
	{
		IsWithdraw = true,
		WithdrawInfo = new WithdrawInfo
		{
			// заполняются необходимые реквизиты
			Comment = "My profit",
			//PaymentId = "45467dyjyttR8WBiTJXptyuTx4wbSerGZ5t45", //Riple
			CryptoAddress = "16zK3M53JBGnjs9ajTBGBfkRqoHtm4E573",
		}
	},
	Security = new Security() { Code = "BTC" },
};

Connector.RegisterOrder(order);

							]]>
							</code>						
						</content>
					</step>
				</steps>
		</procedure>
    
  </developerConceptualDocument>
</topic>