<?xml version="1.0" encoding="utf-8"?>
<topic id="5bb4f6f0-9057-4a88-b968-a5fd60641d4d" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para><codeEntityReference>T:StockSharp.Xaml.OrderGrid</codeEntityReference> - таблица для отображения заявок. 
      Кроме того контестное меню этой таблицы содержит команды для операций с заявками: регистрация, замена и отмена заявок. Выбор пункта меню приводит к генерации
      событий: <codeEntityReference qualifyHint="true">E:StockSharp.Xaml.OrderGrid.OrderRegistering</codeEntityReference>, 
      <codeEntityReference qualifyHint="true">E:StockSharp.Xaml.OrderGrid.OrderReRegistering</codeEntityReference> или 
      <codeEntityReference qualifyHint="true">E:StockSharp.Xaml.OrderGrid.OrderCanceling</codeEntityReference> соответственно.</para>
      
	<alert class="note">
  		<para>Сама операция (регистрация, замена, отмена) не выполняется. Соответствующий код нужно прописывать в обработчиках событий самостоятельно.</para>
	</alert>

	<para>
		<legacyBold>Основные члены</legacyBold>
	</para>
      
	<list class="bullet">
  		<listItem>
  			<para><codeEntityReference>P:StockSharp.Xaml.OrderGrid.Orders</codeEntityReference> - список заявок.</para>
  		</listItem>
  		<listItem>
  			<para><codeEntityReference>P:StockSharp.Xaml.OrderGrid.SelectedOrder</codeEntityReference> - выбранная заявка.</para>
  		</listItem>
  		<listItem>
  			<para><codeEntityReference>P:StockSharp.Xaml.OrderGrid.SelectedOrders</codeEntityReference> - выбранные заявки.</para>
  		</listItem>
  		<listItem>
  			<para><codeEntityReference>M:StockSharp.Xaml.OrderGrid.AddRegistrationFail(OrderFail)</codeEntityReference> - метод, который добавляет сообщение об ошибке регистрации заявки в поле комментария.</para>
  		</listItem>
  		<listItem>
  			<para><codeEntityReference>E:StockSharp.Xaml.OrderGrid.OrderRegistering</codeEntityReference> - событие регистрации заявки (возникает после выбора соответствующего пункта контекстного меню).</para>
  		</listItem>
  		<listItem>
  			<para><codeEntityReference>E:StockSharp.Xaml.OrderGrid.OrderReRegistering</codeEntityReference> - событие замены заявки (возникает после после выбора соответствующего пункта контекстного меню).</para>
  		</listItem>
  		<listItem>
  			<para><codeEntityReference>E:StockSharp.Xaml.OrderGrid.OrderCanceling</codeEntityReference> - событие отмены заявки (возникает после после выбора соответствующего пункта контекстного меню).</para>
  		</listItem>
  		
	</list>

      
     	  <para>
	  Ниже показаны внеший вид компонета, а также фрагменты кода с его использованием. Пример кода взят из <legacyItalic>Samples/Quik/Sample</legacyItalic>.
      </para>
      
      <mediaLink><image placement="left" xlink:href="GUI_OrderGrid" /></mediaLink>
      
       <code title="XAML" language="XAML">
	  				<![CDATA[
<Window x:Class="Sample.OrdersWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:loc="clr-namespace:StockSharp.Localization;assembly=StockSharp.Localization"
    xmlns:xaml="http://schemas.stocksharp.com/xaml"
    Title="{x:Static loc:LocalizedStrings.Orders}" Height="410" Width="930">
	<xaml:OrderGrid x:Name="OrderGrid" x:FieldModifier="public" OrderCanceling="OrderGrid_OnOrderCanceling" OrderReRegistering="OrderGrid_OnOrderReRegistering" />
</Window>
	  				]]>
              </code>
              <code title="C#" language="C#">
              		<![CDATA[
private void ConnectClick(object sender, RoutedEventArgs e)
{
	if (!_isConnected)
	{

        .......................................

		if (Trader == null)
		{
			// создаем подключение
			Trader = isLua
				? new QuikTrader
				{
					LuaFixServerAddress = Address.Text.To<EndPoint>(),
					LuaLogin = Login.Text,
					LuaPassword = Password.Password.To<SecureString>()
				}
				: new QuikTrader(Path.Text) { IsDde = true };

            .......................................			
			
			// Добавляем инструменты в компонент SecurityPicker
			Trader.NewSecurities += securities => _securitiesWindow.SecurityPicker.Securities.AddRange(securities);
			
			// Добавляем свои сделки в таблицу MyTradeGrid
			Trader.NewMyTrades += trades => _myTradesWindow.TradeGrid.Trades.AddRange(trades);
			
			// Добавляем сделки в таблицу TradeGrid
			Trader.NewTrades += trades => _tradesWindow.TradeGrid.Trades.AddRange(trades);
			
			// Добавляем заявки в таблицу OrderGrid
			Trader.NewOrders += orders => _ordersWindow.OrderGrid.Orders.AddRange(orders);
			
			// Добавляем стоп-заявки в таблицу OrderGrid
			Trader.NewStopOrders += orders => _stopOrderWindow.OrderGrid.Orders.AddRange(orders);
			
			Trader.OrdersRegisterFailed += fails => fails.ForEach(fail => this.GuiAsync(() => MessageBox.Show(this, fail.Error.Message, LocalizedStrings.Str2960)));
			Trader.OrdersCancelFailed += fails => fails.ForEach(fail => this.GuiAsync(() => MessageBox.Show(this, fail.Error.Message, LocalizedStrings.Str2981)));
			Trader.StopOrdersRegisterFailed += fails => fails.ForEach(fail => this.GuiAsync(() => MessageBox.Show(this, fail.Error.Message, LocalizedStrings.Str2960)));
			Trader.StopOrdersCancelFailed += fails => fails.ForEach(fail => this.GuiAsync(() => MessageBox.Show(this, fail.Error.Message, LocalizedStrings.Str2981)));
			
			
			// Добавляем портфели в таблицу PortfolioGrid
			Trader.NewPortfolios += portfolios => _portfoliosWindow.PortfolioGrid.Portfolios.AddRange(portfolios);
			
			// Добавляем позиции в таблицу PortfolioGrid
			Trader.NewPositions += positions => _portfoliosWindow.PortfolioGrid.Positions.AddRange(positions);

			// устанавливаем поставщик маркет-данных для компонента SecurityPicker
			_securitiesWindow.SecurityPicker.MarketDataProvider = Trader;

			ShowSecurities.IsEnabled = ShowTrades.IsEnabled =
				ShowMyTrades.IsEnabled = ShowOrders.IsEnabled =
					ShowPortfolios.IsEnabled = ShowStopOrders.IsEnabled = true;
		}

		Trader.Connect();

		_isConnected = true;
		ConnectBtn.Content = LocalizedStrings.Disconnect;
	}
	else
	{
		Trader.Disconnect();

		_isConnected = false;
		ConnectBtn.Content = LocalizedStrings.Connect;
	}
}
              	
// Удаляет все выбранные заявки
private void OrderGrid_OnOrderCanceling(IEnumerable<Order> orders)
{
	orders.ForEach(MainWindow.Instance.Trader.CancelOrder);
}

// Открывает окно редактирования заявки и выполняет замену выбранной заявки
private void OrderGrid_OnOrderReRegistering(Order order)
{
	var window = new OrderWindow
	{
		Title = LocalizedStrings.Str2976Params.Put(order.TransactionId),
		Connector = MainWindow.Instance.Trader,
		Order = order.ReRegisterClone(newVolume: order.Balance),
	};

	if (window.ShowModal(this))
	{
		MainWindow.Instance.Trader.ReRegisterOrder(order, window.Order);
	}
}
              		
              		
              		
	  				]]>
             </code>

      
      
      
      
    </introduction>
  </developerConceptualDocument>
</topic>