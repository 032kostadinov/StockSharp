<?xml version="1.0" encoding="utf-8"?>
<topic id="cd52cfcf-938c-4fce-9a56-4e9a001f0792" revisionNumber="1">
	<developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">

	<introduction>
		<para><token>stocksharp</token> поддерживает следующие виды:</para>
	  
		<list class="bullet">
			<listItem>
				<codeEntityReference>T:StockSharp.Algo.Candles.TimeFrameCandle</codeEntityReference> - свеча на основе временного отрезка, таймфрейма.
				Можно задавать как популярные отрезки (минутки, часовики, дневные), так и кастомизированные. Например, 21 секунда, 4.5 минуты и т.д.
			</listItem>
			
			<listItem>
				<codeEntityReference>T:StockSharp.Algo.Candles.RangeCandle</codeEntityReference> - свеча ценового разброса. Новая свеча создается,
				когда появляется сделка с ценой, выходящей за допустимые пределы. Допустимый предел формируется каждый раз на основе цены первой сделки.
			</listItem>
		  
			<listItem>
				<codeEntityReference>T:StockSharp.Algo.Candles.VolumeCandle</codeEntityReference> - свеча формируется до тех пор, пока суммарно по сделкам
				не будет превышен объем. Если новая сделка превышает допустимый объем, то она попадает уже в новую свечу.
			</listItem>
		  
			<listItem>
				<codeEntityReference>T:StockSharp.Algo.Candles.TickCandle</codeEntityReference> - то же самое, что и <codeEntityReference>T:StockSharp.Algo.Candles.VolumeCandle</codeEntityReference>,
				только в качестве ограничения вместо объема берется количество сделок.
			</listItem>
		  
			<listItem>
				<codeEntityReference>T:StockSharp.Algo.Candles.PnFCandle</codeEntityReference> - свеча пункто-цифрового графика (график крестики-нолики).
			</listItem>
		  
			<listItem>
				<codeEntityReference>T:StockSharp.Algo.Candles.RenkoCandle</codeEntityReference> - Рэнко свеча.
			</listItem>
		</list>
	  
		<para>Как работать со свечами, показано в примере SampleCandle, который расположен в папке <legacyItalic>Samples/Quik/SampleCandles</legacyItalic>.</para>
		<para>На следующих рисунках представлены графики <codeEntityReference>T:StockSharp.Algo.Candles.TimeFrameCandle</codeEntityReference> и 
		<codeEntityReference>T:StockSharp.Algo.Candles.RangeCandle</codeEntityReference>:</para>
		
	  
		<mediaLink><image placement="center" xlink:href="sample_timeframecandles" /></mediaLink>
		<mediaLink><image placement="center" xlink:href="sample_rangecandles" /></mediaLink>
	</introduction>

    <procedure>
		<title>Запуск получения данных</title>

		<steps class="ordered">
												
					<step>
				<content>  			
<para>
Создадим серию свечей <codeEntityReference>T:StockSharp.Algo.Candles.CandleSeries</codeEntityReference>
</para>
					<code language="C#">
					<![CDATA[
...
_candleSeries = new CandleSeries(CandleSettingsEditor.Settings.CandleType, security, CandleSettingsEditor.Settings.Arg);
...		
					]]>
					</code>
				</content>    		
			</step>
			
						<step>
				<content>
					<para>Все необходимые методы для получения свечей реализованы в классе 
					<codeEntityReference qualifyHint="false">T:StockSharp.Algo.Connector</codeEntityReference>.</para>
					<para>Для получения свечей необходимо подписаться на событие
					<codeEntityReference qualifyHint="true">E:StockSharp.Algo.Connector.CandleSeriesProcessing</codeEntityReference>,
					сигнализирующее о появлении нового значения для обработки:</para>
			
					<code language="C#">
					<![CDATA[
_connector.CandleSeriesProcessing += Connector_CandleSeriesProcessing;
...

private void Connector_CandleSeriesProcessing(CandleSeries candleSeries, Candle candle)
{
	Chart.Draw(_candleElement, candle);
}

...
					]]>
					</code>
					
					<alert class="note">
						Для отображения свечей используется графический компонент <codeEntityReference>T:StockSharp.Xaml.Charting.Chart</codeEntityReference>.
					</alert>
				</content>
			</step>
			
			<step>
				<content>
					<para>Далее передаём в коннектор созданную серию свечей и запускаем получение данных через 
<codeEntityReference qualifyHint="false">M:StockSharp.Algo.Connector.SubscribeCandles(StockSharp.Algo.Candles.CandleSeries,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Collections.Generic.IDictionary{System.String,System.Object})</codeEntityReference>:</para>

					<code language="C#">
					<![CDATA[
...
_connector.SubscribeCandles(_candleSeries, DateTime.Today.Subtract(TimeSpan.FromDays(30)), DateTime.Now);	
...
		
					]]>
					</code>
			
					<para>После этого этапа начнёт вызываться событие <codeEntityReference qualifyHint="true">E:StockSharp.Algo.Connector.CandleSeriesProcessing</codeEntityReference>.</para>
				</content>
			</step>
			<step>
				<content>
					<para>При передаче свечи из события 
		<codeEntityReference qualifyHint="true">E:StockSharp.Algo.Connector.CandleSeriesProcessing</codeEntityReference>
		для отрисовки на графике, будут отображаться изменения текущей свечи.</para>
		
		<para>Если же нужно отображать только <legacyBold>"целые"</legacyBold> свечи, то необходимо проверить свойство 
		<codeEntityReference qualifyHint="false">P:StockSharp.Algo.Candles.Candle.State</codeEntityReference> пришедшей свечи:</para>
		
		<code language="C#">
		<![CDATA[
...
private void Connector_CandleSeriesProcessing(CandleSeries candleSeries, Candle candle)
{
    if (candle.State == CandleStates.Finished) 
    {
       var chartData = new ChartDrawData();
       chartData.Group(candle.OpenTime).Add(_candleElement, candle);
       Chart.Draw(chartData);
    }
}
...
		]]>
		</code>	
				</content>
			</step>
<step>	
				<content>
				
<para>Для <codeEntityReference>T:StockSharp.Algo.Candles.CandleSeries</codeEntityReference> можно задать некоторые свойства </para>
<para><codeEntityReference>P:StockSharp.Algo.Candles.CandleSeries.BuildCandlesMode</codeEntityReference> задает 
режим построения свечей, по умолчанию задан 
<codeEntityReference>F:StockSharp.Messages.MarketDataBuildModes.LoadAndBuild</codeEntityReference>, что говорит о том, 
что будут загружены доступные исторические свечи, а после они буду строиться из заданного в свойстве 
<codeEntityReference>P:StockSharp.Algo.Candles.CandleSeries.BuildCandlesFrom</codeEntityReference> 
типа данных. </para>
<para>Если <codeEntityReference>P:StockSharp.Algo.Candles.CandleSeries.BuildCandlesMode</codeEntityReference> задан 
как 
<codeEntityReference>F:StockSharp.Messages.MarketDataBuildModes.LoadAndBuild</codeEntityReference> 
или 
<codeEntityReference>F:StockSharp.Messages.MarketDataBuildModes.Build</codeEntityReference> 
то необходимо задать свойство 
<codeEntityReference>P:StockSharp.Algo.Candles.CandleSeries.BuildCandlesFrom</codeEntityReference> 
указывающее из какого типа данных буду построены свечи (тиковые данные, бид, аск и др.). </para>
<para>Для прорисовки <legacyBold>профиля объема</legacyBold> необходимо установить свойство 
<codeEntityReference>P:StockSharp.Algo.Candles.CandleSeries.IsCalcVolumeProfile</codeEntityReference> в true, 
а также <codeEntityReference>P:StockSharp.Algo.Candles.CandleSeries.BuildCandlesMode</codeEntityReference> в 
<codeEntityReference>F:StockSharp.Messages.MarketDataBuildModes.Build</codeEntityReference>
</para>
<para>Ниже приведены примеры как задать разные типы свечей</para>
					<code language="C#">
					<![CDATA[
//----------------------------------TimeFrameCandle-----------------------------------------------------------------
_candleSeries = new CandleSeries(typeof(TimeFrameCandle), security, TimeSpan.FromMinutes(5))
{
	BuildCandlesMode = MarketDataBuildModes.Build,
	BuildCandlesFrom = MarketDataTypes.Trades,
   IsCalcVolumeProfile = true,
};
/----------------------------------VolumeCandle---------------------------------------------------------------------
_candleSeries = new CandleSeries(typeof(VolumeCandle), security, 10000m)
{
	BuildCandlesMode = MarketDataBuildModes.Build,
	BuildCandlesFrom = MarketDataTypes.Trades,
};
//----------------------------------TickCandle------------------------------------------------------------------------		   
_candleSeries = new CandleSeries(typeof(TickCandle), security, 1000)
{
	BuildCandlesMode = MarketDataBuildModes.Build,
	BuildCandlesFrom = MarketDataTypes.Trades,
};
//----------------------------------RangeCandle-----------------------------------------------------------------------
_candleSeries = new CandleSeries(typeof(RangeCandle), security, new Unit(0.1m))
{
	BuildCandlesMode = MarketDataBuildModes.Build,
	BuildCandlesFrom = MarketDataTypes.Trades,
};
//----------------------------------RenkoCandle-----------------------------------------------------------------------
_candleSeries = new CandleSeries(typeof(RenkoCandle), security, new Unit(0.1m))
{
	BuildCandlesMode = MarketDataBuildModes.Build,
	BuildCandlesFrom = MarketDataTypes.Trades,
};
//----------------------------------PnFCandle--------------------------------------------------------------------------
_candleSeries = new CandleSeries(typeof(PnFCandle), security, new PnFArg() { BoxSize = 0.1m, ReversalAmount =1})
{
  BuildCandlesMode = MarketDataBuildModes.Build,
  BuildCandlesFrom = MarketDataTypes.Trades,
};	
					]]>
					</code>
				</content>
			</step>
		</steps>
	</procedure>
    
	<nextSteps>
		<content>
			<para><link xlink:href="287125e1-7c7e-4be3-a8ce-5018538e613f">График</link></para>
			<para><link xlink:href="ccc96909-8623-4f56-b3ee-fdc5070b3fde">Паттерны</link></para>
			<para><link xlink:href="99da6499-9ac1-4e7e-bcaf-a0c832dce4de">Собственный тип свечей</link></para>
		</content>
	</nextSteps>
	
	 
    
	</developerWalkthroughDocument>
</topic>