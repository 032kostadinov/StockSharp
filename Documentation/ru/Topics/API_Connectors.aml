<?xml version="1.0" encoding="utf-8"?>
<topic id="db1de349-84ef-4e59-a30b-c34a9d47bed2" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
    <para>
Для работы с биржами и источниками данных в <token>stocksharp</token> рекомендуется работать через базовый класс 
<codeEntityReference>T:StockSharp.Algo.Connector</codeEntityReference>. </para>
<para>Рассмотрим работу с <codeEntityReference>T:StockSharp.Algo.Connector</codeEntityReference> 
более подробно на примере описанном в пункте <link xlink:href="1cfb4f7c-b9fc-43da-a958-b0e0f881479d" />. 
Исходные коды примера находятся в проекте Samples/Common/SampleMultiConnection.</para>
<para>Создаём экземпляр класса <codeEntityReference>T:StockSharp.Algo.Connector</codeEntityReference>.	
В конструкторе главного окна вызываем метод <legacyItalic>InitConnector</legacyItalic>, в котором выполняется конфигурирование коннектора: </para>
       				<code language="C#">
				<![CDATA[
...
public Connector Connector;
...
public MainWindow()
{
	InitializeComponent();
...
	var entityRegistry = new CsvEntityRegistry(path);
	var storageRegistry = new StorageRegistry
	{
		DefaultDrive = new LocalMarketDataDrive(path)
	};
	var snapshotRegistry = new SnapshotRegistry(Path.Combine(path, "Snapshots"));
...
	Connector = new Connector(entityRegistry, storageRegistry, snapshotRegistry);
	InitConnector(entityRegistry, snapshotRegistry);
}
		]]>
				</code>
<para>
Для конфигурирования <codeEntityReference>T:StockSharp.Algo.Connector</codeEntityReference> у <legacyBold>S#.API</legacyBold>
есть специальный графический интерфей в котором можно настроить сразу несколько подключений одновременно, 
как им воспользоваться описано в пункте <link xlink:href="554da27b-900a-462a-a2c2-d2b6cb1330ae" />.
</para>
      <code title="C#" language="C#">
<![CDATA[
...
private const string _connectorFile = "ConnectorFile";
...
private void Setting_Click(object sender, RoutedEventArgs e)
{
	if (Connector.Configure(this))
	{
		new XmlSerializer<SettingsStorage>().Serialize(Connector.Save(), _connectorFile);
	}
}
	  				]]>
				   </code>
<para>В методе <legacyItalic>InitConnector</legacyItalic> устанавливаем требуемые обработчики событий <codeEntityReference qualifyHint="false">T:StockSharp.BusinessEntities.IConnector</codeEntityReference>:</para>
<code language="C#">
				<![CDATA[
private void InitConnector(CsvEntityRegistry entityRegistry, SnapshotRegistry snapshotRegistry)
{
	// subscribe on connection successfully event
	Connector.Connected += () =>
	{
		this.GuiAsync(() => ChangeConnectStatus(true));
	};

	// subscribe on connection error event
	Connector.ConnectionError += error => this.GuiAsync(() =>
	{
		ChangeConnectStatus(false);
		MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2959);
	});

	Connector.Disconnected += () => this.GuiAsync(() => ChangeConnectStatus(false));

	// subscribe on error event
	Connector.Error += error =>
		this.GuiAsync(() => MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2955));

	// subscribe on error of market data subscription event
	Connector.MarketDataSubscriptionFailed += (security, msg, error) =>
		this.GuiAsync(() => MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2956Params.Put(msg.DataType, security)))

	Connector.NewSecurity += _securitiesWindow.SecurityPicker.Securities.Add;
	Connector.NewTrade += _tradesWindow.TradeGrid.Trades.Add;

	Connector.NewOrder += _ordersWindow.OrderGrid.Orders.Add;
	Connector.NewStopOrder += _stopOrdersWindow.OrderGrid.Orders.Add;
	Connector.NewMyTrade += _myTradesWindow.TradeGrid.Trades.Add;
	
	Connector.NewPortfolio += _portfoliosWindow.PortfolioGrid.Portfolios.Add;
	Connector.NewPosition += _portfoliosWindow.PortfolioGrid.Positions.Add;

	// subscribe on error of order registration event
	Connector.OrderRegisterFailed += _ordersWindow.OrderGrid.AddRegistrationFail;
	// subscribe on error of order cancelling event
	Connector.OrderCancelFailed += OrderFailed;

	// subscribe on error of stop-order registration event
	Connector.OrderRegisterFailed += _stopOrdersWindow.OrderGrid.AddRegistrationFail;
	// subscribe on error of stop-order cancelling event
	Connector.StopOrderCancelFailed += OrderFailed;

	// set market data provider
	_securitiesWindow.SecurityPicker.MarketDataProvider = Connector;

	try
	{
		if (File.Exists(_settingsFile))
		{
			var ctx = new ContinueOnExceptionContext();
			ctx.Error += ex => ex.LogError();

			using (new Scope<ContinueOnExceptionContext> (ctx))
				Connector.Load(new XmlSerializer<SettingsStorage>().Deserialize(_settingsFile));
		}
	}
	catch
	{
	}

	if (Connector.StorageAdapter == null)
		return;

	try
	{
		entityRegistry.Init();
	}
	catch (Exception ex)
	{
		MessageBox.Show(this, ex.ToString());
	}

	Connector.StorageAdapter.DaysLoad = TimeSpan.FromDays(3);
	Connector.LookupAll();

	snapshotRegistry.Init();

	ConfigManager.RegisterService<IExchangeInfoProvider>(new StorageExchangeInfoProvider(entityRegistry));
}
]]>
			</code> 
<para>Как сохранять и загружать настройки <codeEntityReference>T:StockSharp.Algo.Connector</codeEntityReference> 
в файл можно ознакомиться в пункте <link xlink:href="c23300a1-bf38-444a-b103-28350766477f" />.</para>

<para>О создании собственного <codeEntityReference>T:StockSharp.Algo.Connector</codeEntityReference> можно ознакомиться в пункте <link xlink:href="293859e2-6c39-486c-afde-d9ae96243618" />.</para>
	<para>
	Выставление заявок описаны в пунктах 
	<link xlink:href="1c3c9835-b65b-48d5-8abf-70986c666ef4" />,
	<link xlink:href="b740e98d-7bcf-406e-aad4-75432ab3009e" />,
	<link xlink:href="2587051d-1e94-4fb2-b5c1-d57cb5af1b6d" />.
	</para>
    </introduction>
    <relatedTopics>
<link xlink:href="554da27b-900a-462a-a2c2-d2b6cb1330ae" />
    </relatedTopics>
  </developerConceptualDocument>
</topic>